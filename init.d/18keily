#!/system/xbin/bash

# Demonio de materializacion de registros del sistema
# Keily. Keily requiere ser ejecutado como root en el
# contexto 'init' con el fin de obtener acceso total
# a /proc y otros directorios del sistema.

# NoTengoBattery - 2015

## Registro del Demonio
DNAME="keilyd"
## Registro de los procesos corriente
PNAME="process"
## Registro del kernel
KNAME="kinfo"
## Registro del logcat
CNAME="logcat"
## 'cpuinfo' dump
CPUNAME="cpuinfo"
## 'build.prop" dump
BNAME="build_prop"
## last_kmsg
LASTKMSG="last_kmsg"

## Modificar el valor de MINS para cambiar la frecuencia
## la que Keily escribe los registros a la SDCARD. Solo
## Enteros, bash no acepta decimales.
MINS=15
SECS=$(($MINS * 60))

##FECHA Y HORA
function dtime (){
    DATE="$(date +%m%d%y@%H:%M:%S)"
    echo $DATE
}
function namedate (){
    DATE="-$(date +%m%d%y-%H.%M)"
    echo $DATE
}
function OK (){
    OK="[ -DONE-$(dtime) ]"
    echo $OK
}

function WARN (){
    WARN="[ -WARN-$(dtime) ]"
    echo $WARN
}
function ERR (){
    ERR="[ -ERR-$(dtime) ]"
    echo $ERR
}
function separator (){
    CHAR="#"
    SEP=""
    for s in {1..128}
    do
        SEP=$SEP$CHAR
    done
}

SEPA=$(separator)

## FILEDIR contiene la carpeta donde se guarda el ZIP
## listo para enviar, se recomienda no tocar este valor.
## TMPDIR almacena donde se guardan los archivos de
## texto plano antes de comprimirse en un ZIP
FILEDIR=/sdcard/logged
TMPDIR=$FILEDIR/tmp
OUTDIR=$FILEDIR/out

CURR_PROFIX=_curr
PACKED_PROFIX=.zip
LAST_PROFIX=_last
NORM_PROFIX=.txt

# Apunta al ZIP actual y al ZIP anterior
LAST_ZIP_PREFIX=$DNAME$LAST_PROFIX
LOG_ZIP_PREFIX=$DNAME$CURR_PROFIX
LOG_PACKED=$OUTDIR/$LOG_ZIP_PREFIX$(namedate)$PACKED_PROFIX

## UBICANDO LOS ARCHIVOS
DELOG=$TMPDIR/$DNAME$CURR_PROFIX$NORM_PROFIX
REG_LIST=( $PNAME$NORM_PROFIX $KNAME$NORM_PROFIX $CNAME$NORM_PROFIX $CPUNAME$NORM_PROFIX $BNAME$NORM_PROFIX $LASTKMSG$NORM_PROFIX )

ID=$RANDOM

## La primera cosa es mover $LOG_FILE a $LAST_LOG_FILE
if [ -z $1 ];
then
    MAKEDIR=""
    ls $FILEDIR || MAKEDIR="SI"
    ls $OUTDIR || MAKEDIR="SI"
    ls $TMPDIR || MAKEDIR="SI"
    if [ -z $MAKEDIR ];
    then
        ## Quitar el directorio TMP
        rm -rf $TMPDIR
        mkdir $TMPDIR
        echo "$(OK) Keily #$ID" > $DELOG
        echo "$(OK) Keily fue lanzado con la orden '$0 $@'" >> $DELOG
        echo "$(OK) Archivos obsoletos limpiados correctamente" >> $DELOG
        THISDIR=$(pwd)
        echo "$(OK) En el directorio '$THISDIR'" >> $DELOG
        cd $OUTDIR
        echo "$(OK) Cambiado a '$OUTDIR'" >> $DELOG
        ## Borro los "last" inutiles
        FIL=$(ls $LAST_ZIP_PREFIX*)
        rm $LAST_ZIP_PREFIX* && echo "$(OK) Borrado $FIL" >> $DELOG
        ## Muevo los "current" a Last antes de sobrescribirlos
        FIL=$(ls $LOG_ZIP_PREFIX*)
        DAT="${FIL: -17:17}"
        mv $LOG_ZIP_PREFIX* $LAST_ZIP_PREFIX$DAT && echo "$(OK) Movido $FIL a $LAST_ZIP_PREFIX$DAT" >> $DELOG
        for i in "${REG_LIST[@]}"
        do
            echo "" > $TMPDIR/$i && echo "$(OK) Inicializado el archivo $TMPDIR/$i" >> $DELOG || echo "$(ERR) No se puede iniciarlizar $TMPDIR/$i" >> $DELOG
        done
        echo "" > $LOG_PACKED
    else
        ## No existe la carpeta en /sdcard
        mkdir $FILEDIR
        mkdir $TMPDIR
        mkdir $OUTDIR
        echo "$(OK) Keily #$ID" > $DELOG
        echo "$(OK) Keily fue lanzado con la orden '$0 $@'" >> $DELOG
        echo "$(OK) Creado el directorio de trabajo y el temporal." >> $DELOG
        echo "$(OK) Keily relanzado (primer arranque)." >> $DELOG
        setsid $0 &>>/dev/null < /dev/null &
        exit 0
    fi
    echo "$(OK) A punto de demonizar Keily..." >> $DELOG
    setsid $0 --demonize &>>$DELOG < $DELOG &
    echo "$(OK) El pre-inicio de Keily ha finalizado." >> $DELOG
elif [[ $1 == --demonize ]];
## Aqui la salida se redirige al archivo predefinido en el inicio previo del demonio
then
    echo "$(OK) Keily #$ID --demonize"
    echo "$(OK) Keily fue lanzado con la orden '$0 $@'" >> $DELOG
    echo "$(OK) Keily se lanzo como demonio correctamente."
    WHOAMI=$(whoami)
    if [ "$WHOAMI" != "root" ];
    then
        echo "$(ERR) El demonio de Keily debe ejecutarse como root, '$WHOAMI' no es root."
    else
        echo "$(OK) El demonio Keily #$ID se esta ejecutando como 'root'"
        cd $FILEDIR && echo "$(OK) Cambiado al directorio de trabajo $FILEDIR" || echo "$(ERR) No se puede cambiar al directorio $FILEDIR"
        THISDIR=$(pwd)
        if [ "$THISDIR" = "$FILEDIR" ];
        then
            ## EN ESTE WHILE SE EJECUTAN LOS COMANDOS PARA VOLCAR LOS BUFFER DE REGISTROS
            while [ -z "" ];
                do
                     for j in "${REG_LIST[@]}"
                     do
                         echo "$(OK) Escribiendo los registros del sistema en $j."
                         SUCESS=""
                         echo "$(OK) Inicio del archivo" > $TMPDIR/$j && SUCESS="Y" || SUCESS="N"
                         if [ "$SUCESS" = "Y" ];
                         then
                             VALID=""
                             echo "$(OK) Archivo $j iniciado correctamente."
                             echo "$(OK) Inicio del archivo $j..." > $TMPDIR/$j
                             echo "$(OK) $SEPA" >> $TMPDIR/$j
                             echo "$(OK) $SEPA" >> $TMPDIR/$j
                             case $j in
                             $PNAME$NORM_PROFIX)
                                 ## PROCESOS CORRIENTES Y SU INFORMACION (/proc)
                                 echo "$(OK) Viendo dentro del directorio /proc" >> $TMPDIR/$j
                                 echo "$(OK)
$(ls /proc)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Lista de los procesos corrientes usando TOP" >> $TMPDIR/$j
                                 echo "$(OK)
$(top -bcn 1)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Memoria libre usando FREE" >> $TMPDIR/$j
                                 echo "$(OK)
$(free -h -l)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Archivo de procesos escrito correctamente." >> $TMPDIR/$j
                                 ;;
                             $KNAME$NORM_PROFIX)
                             ## COSAS DEL KERNEL
                                 echo "$(OK) Version del kernel" >> $TMPDIR/$j
                                 echo "$(OK)
$(uname -a)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Informacion del kernel" >> $TMPDIR/$j
                                 echo "$(OK)
$(cat /proc/version)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Modulos cargados (/proc/modules)" >> $TMPDIR/$j
                                 echo "$(OK)
$(cat /proc/modules)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) CMDLINE" >> $TMPDIR/$j
                                 echo "$(OK)
$(cat /proc/cmdline)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Salida de DMESG" >> $TMPDIR/$j
                                 echo "$(OK)
$(dmesg)
                                 " >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 ;;
                             $CNAME$NORM_PROFIX)
                                 echo "$(OK) Logcat de RADIO"  >> $TMPDIR/$j
                                 echo "$(OK) 
$(logcat -b radio -v time -d)
                                 "  >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Logcat de EVENTS"  >> $TMPDIR/$j
                                 echo "$(OK) 
$(logcat -b events -v time -d)
                                 "  >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) Logcat de MAIN"  >> $TMPDIR/$j
                                 echo "$(OK) 
$(logcat -b main -v time -d)
                                 "  >> $TMPDIR/$j
                                 ;;
                             $CPUNAME$NORM_PROFIX)
                                 echo "$(OK) Inforacion de la CPU" >> $TMPDIR/$j
                                 echo "$(OK) 
$(cat /proc/cpuinfo)
                                 " >> $TMPDIR/$j
                                 ;;
                             $BNAME$NORM_PROFIX)
                                 echo "$(OK) Salida de BUILD.PROP" >> $TMPDIR/$j
                                 echo "$(OK) 
$(cat /system/build.prop)
                                 " >> $TMPDIR/$j
                                 ;;
                             $LASTKMSG$NORM_PROFIX)
                                 echo "$(OK) Copia de last_kmgs" >> $TMPDIR/$j
                                 echo "$(OK) 
$(cat /proc/last_kmgs)
                                 " >> $TMPDIR/$j
                                 ;;
                             *)
                                 echo "$(ERR) Archivo de trabajo $j no encontrado."
                                 ;;
                             esac
                             if [ -z $VALID ];
                             then
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) $SEPA" >> $TMPDIR/$j
                                 echo "$(OK) EOF" >> $TMPDIR/$j
                            fi
                         else
                             echo "$(ERR) No se puede accesar al archivo $j."
                         fi
                    done
                    cp /proc/config.gz $TMPDIR/config.gz
                    cp /proc/filesystems $TMPDIR/filesystems
                    #
                    THSDIR=$(pwd)
                    cd $TMPDIR && echo "$(OK) En el directorio $TMPDIR"
                    rm $LOG_PACKED && echo "$(OK) Borrado $LOG_PACKED"
                    zip $DNAME$CURR_PROFIX$PACKED_PROFIX * && echo "$(OK) Comprimido $(ls) en $DNAME$CURR_PROFIX$PACKED_PROFIX"
                    mv $DNAME$CURR_PROFIX$PACKED_PROFIX $LOG_PACKED && echo "$(OK) Movido $DNAME$CURR_PROFIX$PACKED_PROFIX a $LOG_PACKED"
                    cd $THSDIR && echo "$(OK) En el directorio $THISDIR"
                    sleep $SECS && echo "$(OK) Tiempo de $SECS segundos agotado. Inicio de nuevo"
                    echo $(separator)
                    echo ""
                    echo ""
                done
        else
            echo "$(ERR) No se pudo entrar al directorio de trabajo."
        fi
    fi
else
    echo "$(OK) Keily #$ID"
    echo "$(ERR) Para iniciar Keily como demonio se utiliza '--demonize' como primer parametro" >> $DELOG
fi
echo "$(OK) Sesion de Keily #$ID finalizada correctamente." >> $DELOG
