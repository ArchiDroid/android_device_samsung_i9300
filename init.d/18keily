#!/system/xbin/bash

# Demonio de materializacion de registros del sistema
# Keily. Keily requiere ser ejecutado como root en el
# contexto 'init' con el fin de obtener acceso total
# a /proc y otros directorios del sistema.

# NoTengoBattery - 2015

## Registro del Demonio
DNAME="keilyd"
## Registro de los procesos corriente
PNAME="proc"
## Registro del kernel
KNAME="krnl"
## Registro del logcal
CNAME="lcat"
## 'cpuinfo' dump
CPUNAME="cpud"
## 'build.prop" dump
BNAME="bprop"
## 'lsmod' LOG
MODNAME="kmod"

## Modificar el valor de MINS para cambiar la frecuencia
## la que Keily escribe los registros a la SDCARD. Solo
## Enteros, bash no acepta decimales.
MINS=10
SECS=$(($MINS * 60))

##FECHA Y HORA
function dtime (){
    DATE="$(date +%d/%m/%y@%H:%M:%S)"
    echo $DATE
}
function OK (){
    OK="[ ---CORRECTO--$(dtime) ]"
    echo $OK
}

function WARN (){
    WARN="[ -ADVERTENCIA-$(dtime) ]"
    echo $WARN
}
function ERR (){
    ERR="[ ----ERROR----$(dtime) ]"
    echo $ERR
}

## FILEDIR contiene la carpeta donde se guarda el ZIP
## listo para enviar, se recomienda no tocar este valor.
## TMPDIR almacena donde se guardan los archivos de
## texto plano antes de comprimirse en un ZIP
FILEDIR=/sdcard/logged
TMPDIR=$FILEDIR/tmp

CURR_PROFIX=_curr
PACKED_PROFIX=.zip
LAST_PROFIX=_last
NORM_PROFIX=.txt

# Apunta al ZIP actual y al ZIP anterior
LOG_PACKED=$FILEDIR/$DNAME$CURR_PROFIX$PACKED_PROFIX
LAST_LOG_PACKED=$FILEDIR/$DNAME$LAST_PROFIX$PACKED_PROFIX

## UBICANDO LOS ARCHIVOS
DELOG=$TMPDIR/$DNAME$CURR_PROFIX$NORM_PROFIX
REG_LIST=( $PNAME$NORM_PROFIX $KNAME$NORM_PROFIX $CNAME$NORM_PROFIX $CPUNAME$NORM_PROFIX $BNAME$NORM_PROFIX $MODNAME$NORM_PROFIX )
PROCF=$TMPDIR/${REG_LIST[0]}
KERNF=$TMPDIR/${REG_LIST[1]}
LCATF=$TMPDIR/${REG_LIST[2]}
CPUIF=$TMPDIR/${REG_LIST[3]}
BUILF=$TMPDIR/${REG_LIST[4]}
LSMOF=$TMPDIR/${REG_LIST[5]}

ID=$RANDOM

## La primera cosa es mover $LOG_FILE a $LAST_LOG_FILE
if [ -z $1 ];
then
    MAKEDIR=""
    ls $FILEDIR || MAKEDIR="SI"
    if [ -z $MAKEDIR ];
    then
        ## Borro los "last" inutiles
        rm $LAST_LOG_PACKED 
        ## Muevo los "current" a Last antes de sobrescribirlos
        mv $LOG_PACKED $LAST_LOG_PACKED
        ## Quitar el directorio TMP
        rm -rf $TMPDIR
        mkdir $TMPDIR
        echo "$(OK) Keily #$ID" > $DELOG
        echo "$(OK) Archivos obsoletos limpiados correctamente" >> $DELOG
        for i in "${REG_LIST[@]}"
        do
            echo "" > $TMPDIR/$i && echo "$(OK) Inicializado el archivo $TMPDIR/$i" >> $DELOG || echo "$(ERR) No se puede iniciarlizar $TMPDIR/$i" >> $DELOG
        done
        echo "" > $LOG_PACKED
    else
        ## No existe la carpeta en /sdcard
        mkdir $FILEDIR
        mkdir $TMPDIR
        echo "$(OK) Keily #$ID" > $DELOG
        echo "$(OK) Creado el directorio de trabajo y el temporal." >> $DELOG
    fi
    echo "$(OK) A punto de demonizar Keily..." >> $DELOG
    setsid ./18keily --demonize &>>$DELOG < $DELOG &
    echo "$(OK) El pre-inicio de Keily ha finalizado." >> $DELOG
elif [[ $1 == --demonize ]];
## Aqui la salida se redirige al archivo predefinido en el inicio previo del demonio
then
    echo "$(OK) Keily #$ID --demonize"
    echo "$(OK) Keily se lanzo como demonio correctamente."
    WHOAMI=$(whoami)
    if [ "$WHOAMI" != "root" ];
    then
        echo "$(ERR) El demonio de Keily debe ejecutarse como root, $WHOAMI no es root."
    else
        echo "$(OK) El demonio Keily #$ID se esta ejecutando como 'root'"
        cd $FILEDIR && echo "$(OK) Cambiado al directorio de trabajo $FILEDIR" || echo "$(ERR) No se puede cambiar al directorio $FILEDIR"
        THISDIR=$(pwd)
        if [ "$THISDIR" = "$FILEDIR" ];
        then
        ## BUILD.PROP SYSCTL.CONF CPUINFO LSMOD
        
        
        echo "$(OK) Volcado del archivo /system/build.prop" >> $BUILF
        echo "$(OK)
        
$(cat /system/build.prop)
        
        " >> $BUILF
        echo "$(OK) #############################################################" >> $BUILF
        echo "$(OK) Archivo $BUILF escrito completamente."
        echo "$(OK) TERMINADO: No mas informacion para recolectar" >> $BUILF
        
        
        echo "$(OK) Volcado del archivo /proc/cpuinfo" >> $CPUIF
        echo "$(OK)

$(cat /proc/cpuinfo)

        " >> $CPUIF
        echo "$(OK) #############################################################" >> $CPUIF
        echo "$(OK) Archivo $CPUIF escrito completamente."
        echo "$(OK) TERMINADO: No mas informacion para recolectar" >> $CPUIF
        
        
        echo "$(OK) Modulos del kernel cargados" >> $LSMOF
        echo "$(OK)
        
$(lsmod)
        
        " >> $LSMOF
        echo "$(OK) #############################################################" >> $LSMOF
        echo "$(OK) Archivo $LSMOF escrito completamente."
        echo "$(OK) TERMINADO: No mas informacion para recolectar" >> $LSMOF
            while [ -z "" ];
            do
                ## EN ESTE ESPACIO EL DEMONIO KEILY EJECUTA ACCIONES CADA $SECS SEGUNDOS
                echo "$(OK) Contenido dentro de /proc" >> $PROCF
                echo "$(OK)
                
$(ls /proc)

                " >> $PROCF
                echo "$(OK) Lista de todos los procesos" >> $PROCF
                echo "$(OK)
                
$(ps all)

                " >> $PROCF
                echo "$(OK) Mapa de la memoria RAM" >> $PROCF
                echo "$(OK)
                
$(free -h -l)
                
                " >> $PROCF
                echo "$(OK) #############################################################" >> $PROCF
                echo "$(OK) Archivo $PROCF escrito completamente."
                echo "$(OK) TERMINADO: No mas informacion para recolectar" >> $PROCF
                
                
                echo "$(OK) Version del kernel" > $KERNF
                echo "$(OK)
                
$(uname -a)
                
                " >> $KERNF
                echo "$(OK)
                
$(cat /proc/version)
                
                " >> $KERNF
                echo "$(OK) Volcado de la salida de DMESG" >> $KERNF
                echo "$(WARN) Este archivo puede ser bastante grande" >> $KERNF
                echo "$(OK)
                
$(dmesg)
                
                " >> $KERNF
                echo "$(OK) #############################################################" >> $KERNF
                echo "$(OK) Archivo $KERNF escrito completamente."
                echo "$(OK) TERMINADO: No mas informacion para recolectar" >> $KERNF
                
                
                echo "$(WARN) Este archivo puede ser bastante grande" > $LCATF
                echo "$(OK) Volcado del Logcat del buffer de mensajes de 'radio'" >> $LCATF
                echo "$(OK)
                
$(logcat -b radio -v time)

                " >> $LCATF
                echo "$(OK) Volcado del Logcat del buffer de mensajes 'eventos'" >> $LCATF
                echo "$(OK)
                
$(logcat -b events -v time)
                
                " >> $LCATF
                echo "$(OK) Volcado del Logcat del buffer de mensajes 'main'" >> $LCATF
                echo "$(OK)
                
$(logcat -b main -v time)

                " >> $LCATF                
                echo "$(OK) #############################################################" >> $LCATF
                echo "$(OK) Archivo $LCATF escrito completamente."
                echo "$(OK) TERMINADO: No mas informacion para recolectar" >> $LCATF
                
                ## Crear el ZIP
                rm $LOG_PACKED
                echo "$(WARN) Creando el archivo comprimido en ZIP con la inforacion recolectada
            
$(zip -r -9 $LOG_PACKED $TMPDIR)

                "
                echo "$(OK) Paquete listo para enviar al desarrollador..."
                echo "$(OK) El proximo paquete se creara en $SECS segundos ($MINS minutos)."
                sleep $SECS
            done
        else
            echo "$(ERR) No se puede entrar al directorio de trabajo."}

        fi
    fi
else
    echo "$(OK) Keily #$ID"
    echo "$(ERR) Para iniciar Keily como demonio se utiliza '--demonize' como primer parametro" >> $DELOG
fi


echo "$(OK) Sesion de Keily #$ID finalizada correctamente." >> $DELOG